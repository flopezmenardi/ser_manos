// Mocks generated by Mockito 5.4.6 from annotations
// in ser_manos/test/mocks/analytics_service_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:ser_manos/infrastructure/analytics_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AnalyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalyticsService extends _i1.Mock implements _i2.AnalyticsService {
  MockAnalyticsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> logViewedVolunteering(String? volunteeringId) =>
      (super.noSuchMethod(
            Invocation.method(#logViewedVolunteering, [volunteeringId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> logVolunteeringApplication({
    required String? volunteeringId,
    required int? viewsBeforeApplying,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#logVolunteeringApplication, [], {
              #volunteeringId: volunteeringId,
              #viewsBeforeApplying: viewsBeforeApplying,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> logLikedVolunteering({required String? volunteeringId}) =>
      (super.noSuchMethod(
            Invocation.method(#logLikedVolunteering, [], {
              #volunteeringId: volunteeringId,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> logWithdrawVolunteering({
    required String? volunteeringId,
    required int? daysBeforeStart,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#logWithdrawVolunteering, [], {
              #volunteeringId: volunteeringId,
              #daysBeforeStart: daysBeforeStart,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
