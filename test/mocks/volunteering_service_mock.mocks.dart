// Mocks generated by Mockito 5.4.6 from annotations
// in ser_manos/test/mocks/volunteering_service_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:cloud_firestore/cloud_firestore.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:ser_manos/features/volunteerings/service/volunteerings_service.dart'
    as _i2;
import 'package:ser_manos/models/enums/sort_mode.dart' as _i5;
import 'package:ser_manos/models/volunteering_model.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [VolunteeringsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockVolunteeringsService extends _i1.Mock
    implements _i2.VolunteeringsService {
  MockVolunteeringsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Volunteering>> getAllVolunteeringsSorted({
    required _i5.SortMode? sortMode,
    _i6.GeoPoint? userLocation,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getAllVolunteeringsSorted, [], {
              #sortMode: sortMode,
              #userLocation: userLocation,
            }),
            returnValue: _i3.Future<List<_i4.Volunteering>>.value(
              <_i4.Volunteering>[],
            ),
          )
          as _i3.Future<List<_i4.Volunteering>>);

  @override
  _i3.Future<_i4.Volunteering?> getVolunteeringById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getVolunteeringById, [id]),
            returnValue: _i3.Future<_i4.Volunteering?>.value(),
          )
          as _i3.Future<_i4.Volunteering?>);

  @override
  _i3.Future<void> applyToVolunteering(String? uid, String? volunteeringId) =>
      (super.noSuchMethod(
            Invocation.method(#applyToVolunteering, [uid, volunteeringId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> withdrawApplication(String? uid) =>
      (super.noSuchMethod(
            Invocation.method(#withdrawApplication, [uid]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> abandonVolunteering(String? uid, String? volunteeringId) =>
      (super.noSuchMethod(
            Invocation.method(#abandonVolunteering, [uid, volunteeringId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> toggleFavorite({
    required String? userId,
    required String? volunteeringId,
    required bool? isFavorite,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toggleFavorite, [], {
              #uid: userId,
              #volunteeringId: volunteeringId,
              #isFavorite: isFavorite,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<int> getFavoritesCount(String? volunteeringId) =>
      (super.noSuchMethod(
            Invocation.method(#getFavoritesCount, [volunteeringId]),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);
}
